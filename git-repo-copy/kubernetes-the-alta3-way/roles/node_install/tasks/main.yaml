---

- name: create directories for the kubernetes nodes
  file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  with_items:
   - "/etc/cni/net.d"
   - "/opt/cni/bin"
   - "/var/lib/kubelet"
   - "/var/lib/kube-proxy"
   - "/var/lib/kubernetes"
   - "/var/run/kubernetes"
   - "/etc/containerd/"
  become: True

- name: Copy Certs to Nodes
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    mode: '{{ item.mode }}'
  loop: "{{ deployed_cert_and_config_files }}"
  loop_control:
     label: "File = {{ item.dest }}"
  become: True

- name: Copy certs/keys/kubeconfigs to Nodes
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  loop:
   - src: "{{ cert_dir }}/{{ public_fqdn }}.pem"
     dest: "/var/lib/kubelet/{{ public_fqdn }}.pem"
     mode: "0664"
   - src: "{{ cert_dir }}/{{ public_fqdn }}-key.pem"
     dest: "/var/lib/kubelet/{{ public_fqdn }}-key.pem"
     mode: "0600"
   - src: "{{ config_dir }}/kube-proxy.kubeconfig"
     dest: "{{ kube_proxy_kubeconfig_file }}"
     mode: "0600"
   - src: "{{ config_dir }}/{{ public_fqdn }}.kubeconfig"
     dest: "{{ kubelet_kubeconfig_file }}"
     mode: "0600"

  vars:
    public_fqdn: "{{ hostvars[inventory_hostname]['public_fqdn'] }}"
  loop_control:
     label: "File = {{ item.dest }}"
  become: True

- name: Install kubernetes apt dependencies on nodes
  apt:
    name:
    - socat
    - conntrack
    - ipset
    state: latest
  become: True

- name: Download Kubernetes kubectl
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  loop:
   - url: "{{ kubectl.url }}"
     dest: "{{ kubectl.path }}"
     mode: '0755'
  become: True

- name: Download the Node binaries
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.path }}"
    mode: "{{ item.mode }}"
  loop: "{{ node_binaries }}"
  loop_control:
     label: "k8s v{{ k8s_version }} - {{ item.path }}"
  become: True

- name: Download and unarchive Node dependencies
  unarchive:
    remote_src: yes
    src: "{{ item.url }}"
    dest: "{{ item.dest }}"
    extra_opts: "{{ item.extra_opts }}"
  loop: "{{ node_archive_dependencies }}"
  loop_control:
     label: "{{ item.name }}"
  become: True

- name: Create the 99-loopback.conf file for each node.
  copy:
    src: "{{ role_path }}/files/99-loopback.conf"
    dest: "/etc/cni/net.d"
    mode: "0664"
  become: True

- name: Enable br_netfilter kernel module
  modprobe:
    name: "{{ item }}"
    state: present
  become: True
  loop:
   - br_netfilter
   - overlay

- name: Enable packet forwarding on the node
  sysctl:
    name: "{{ item }}"
    value: 1
    sysctl_set: True
    state: present
    reload: yes
  become: True
  loop:
   - "net.ipv4.ip_forward"
   - "net.bridge.bridge-nf-call-iptables"
   - "net.bridge.bridge-nf-call-ip6tables"

- name: Persist br_netfilter kernell module loading (on reboot)
  copy:
    dest: "/etc/modules-load.d/{{ item }}.conf"
    content: "{{ item }}"
  become: True
  loop:
   - br_netfilter
   - overlay

- name: Create node configuration files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "0664"
  become: True
  loop: "{{ node_configs }}"
  loop_control:
     label: "{{ item.name }}"

- name: Create the containerd service (systemd) file
  copy:
    src: "{{ role_path }}/templates/containerd.service.j2"
    dest: "/etc/systemd/system/containerd.service"
    mode: "0664"
  become: True

- name: Update the containerd config file
  template:
    src: "{{ role_path }}/templates/config.toml.j2"
    dest: "/etc/containerd/config.toml"
    mode: "0644"
  become: True

- name: Create the node services config files for each node
  template:
    src: "{{ item.service_j2 }}"
    dest: "{{ item.service_path }}"
  loop: "{{ node_services }}"
  loop_control:
     label: "{{ item.service_path }}"
  become: True

- name: Reload systemctl daemons
  systemd:
    daemon_reload: yes
  become: True

- name: Enable k8s services
  systemd:
    enabled: yes
    name: "{{ item.name }}"
  loop: "{{ node_services }}"
  become: True

- name: Restart the k8s services
  systemd:
    state: restarted
    name: "{{ item.name }}"
  loop: "{{ node_services }}"
  become: True

- name: Allow Kubernetes Nodes services to fully initialize
  pause:
    seconds: "{{ pause_seconds }}"
